{
  "README.html": {
    "href": "README.html",
    "title": "OSIsoft Adapter DNP3 Docs",
    "keywords": "OSIsoft Adapter DNP3 Docs"
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration OSIsoft Adapter for DNP3 provides configuration of data source and data selection. The adapter also provides configuration of security and the ability to generate a data selection file instead of manual configuration. The examples in the configuration topics use curl , a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/OSIsoft Adapter for DNP3 data selection configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for DNP3 data selection configuration.html",
    "title": "OSIsoft Adapter for DNP3 data selection configuration",
    "keywords": "OSIsoft Adapter for DNP3 data selection configuration"
  },
  "V1/Configuration/OSIsoft Adapter for DNP3 data source configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for DNP3 data source configuration.html",
    "title": "OSIsoft Adapter for DNP3 data source configuration",
    "keywords": "OSIsoft Adapter for DNP3 data source configuration To use the DNP3 adapter, you must configure the adapter to collect data from one or more DNP3 compliant outstations. The adapter may make many TCP connections, by defining multiple TCP channels, and many connections to outstations, by defining multiple outstation configurations. Configure DNP3 data source Note: You cannot modify DNP3 data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure the DNP3 data source: Using any text editor, create a file that contains a DNP3 data source in JSON form. For content structure, see DNP3 data source Example . For a table of all available parameters, see DNP3 data source parameters . Save the file, for example, as DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:\\<port>/api/v1/configuration/\\<adapterId>/DataSource/ . Note: The following example uses DNP3-1 as the adapter component name. For more information on how to add a component, see System components configuration . The example also assumes that the default port number, 5590, is used. If you selected a different port number, replace it with that value. curl -v -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" \"http://localhost:5590/api/v1/configuration/DNP3-1/DataSource\" Note: After you have completed data source configuration, the next step is to configure data selection. Depending on your data source configuration, your data selection configuration may be pre-populated by discovery. For more information, see OSIsoft Adapter for DNP3 data selection configuration and Discovery . DNP3 data source schema The full schema definition for the DNP3 data source configuration is in the DNP3_DataSource_schema.json file which is located: OS Directory Windows %ProgramFiles%\\OSIsoft\\Adapters\\DNP3\\Schemas Linux /opt/OSIsoft/Adapters/DNP3/Schemas DNP3 data source parameters Many of the data source configuration parameters are split into four categories: Parameters that define the adapter's behavior as a DNP3 master station are defined as MasterStationBehaviors Parameters that define the general behaviors of the DNP3 outstations are defined as OutstationBehaviors Parameters that define the connection information for a TCP channel are defined as TCPChannels Parameters that define the connection information for a specific outstation are defined as Outstations The following parameters may be used to configure a DNP3 data source: Parameter Required Type Description MasterStationBehaviors Required array List of MasterStationBehavior objects that define the adapter's behavior as a DNP3 master station. See MasterStationBehavior Parameters for more info. OutstationBehaviors Required array List of OutstationBehavior objects that define general behaviors for DNP3 outstations. See OutstationBehavior Parameters for more info. TCPChannels Required array List of TCPChannel objects that define TCP connection information. See TCPChannel Parameters for more info. StreamIdPrefix Optional string Specifies what prefix is used for Stream IDs. Note: An empty string means no prefix will be added to the Stream IDs. Specifying 'null' or omitting this parameter will result in the ComponentID followed by a dot character being used to prefix the Stream IDs. DefaultStreamIdPattern Optional string Specifies the default Stream ID pattern to use. Possible parameters: {OutstationId}, {DNPPointType}, {Index}, {Group}, and {Variation}. An empty or null value will result in \"{OutstationId}.{DNPPointType}.{Index}\" MasterStationBehavior Parameters The following parameters may be used to configure each MasterStationBehavior in the MasterStationBehaviors array: Parameter Required Type Description Id Required string Friendly identifier for the configuration. Must be unique among all MasterStationBehaviors. MasterAddress Required number Address that the Adapter will use when communicating on a Channel. Must be an available address on the Channel, Outstations may need to be configured to accept connections from this address. This is a 2 byte, unsigned integer. DataLinkLayerTimeout Optional string Period that should be long enough for a Data Link Layer frame to be transmitted. \"HH:MM:SS.##\" format. Default is 3 seconds. DataLinkLayerRetries Optional number Number of times that the adapter will re-send a data link frame before resetting the link. Default is 2. OutstationBehavior Parameters The following parameters may be used to configure each OutstationBehavior in the OutstationBehaviors array: Parameter Required Type Description Id Required string Friendly identifier for the configuration. Must be unique among all OutstationBehaviors. ApplicationLayerTimeout Optional string Period that should be long enough for an entire Application Layer message to be transmitted. \"HH:MM:SS.##\" format. Default is 3 seconds. EnableUnsolicited Optional boolean If true, the adapter will accept unsolicited messages from an outstation that is configured to send unsolicited event data. Default is true. EnableTimeSync Optional boolean If true, the adapter will write the current time to an outstation that indicates \"NeedTime\" via the internal indication bits. Default is true. IntegrityScanOnStartup Optional boolean If true, the adapter will perform an integrity scan whenever the adapter or outstation is restarted. Default is true. IntegrityScanOnEventBufferOverflow Optional boolean If true, the adapter will perform an integrity scan whenever the outstation's event buffers overflow. Default is true. IntegrityScanPeriod Optional string Frequency of integrity scans. Set to \"00:00:00\" for no periodic integrity scans. \"HH:MM:SS.##\" format. Default is 1 hour. EventClasses Optional array List of event classes that the adapter will scan during an event scan. Default is [1, 2, 3], meaning all event classes. EventScanPeriod Optional string Frequency of event scans. \"HH:MM:SS.##\" format. Set to \"00:00:00\" for no event scans. Default is \"00:00:00\" TCPChannel Parameters The following parameters may be used to configure each Thannel in the TCPChannels array: Parameter Required Type Description HostNameOrIpAddress* Required string IPv4 address or hostname that can be resolved to an IPv4 address. The adapter will establish a connection to this address. Port* Optional number TCP port that the outstations are listening on. Default is 20000. MasterStationBehaviorId Required string Must match the Id of one of the configurations in the MasterStationBehaviors list. Outstations Required array List of outstations that the adapter will connect to on the TCPChannel. Note: A TCPChannel is uniquely identified by the combination of its HostNameOrIPAddress and Port properties. For valid configuration, each TCPChannel must have a unique combination of these properties. Outstation Parameters The following parameters may be used to configure each Outstation in the Outstations array within a TCP channel: Parameter Required Type Description Id Required string Friendly identifier of the outstation. Must be unique among all Channels and Outstations. May be referenced by a data selection item. DNPAddress Required number Address of the Outstation on the Channel. This is a 2 byte, unsigned integer. OutstationBehaviorId Required string Must match the Id of one of the configurations in the OutstationBehaviors array. DNP3 data source examples Minimum configuration for a single outstation The following example is a configuration for a single outstation on a single TCP channel. The optional configuration parameters have been omitted, so the default values will be used. With the default configuration, the adapter will accept unsolicited responses and perform an integrity scan every hour, potentially triggering Discovery . For more information about the default configuration, reference the tables above. { \"masterStationBehaviors\": [ { \"id\": \"masterBehavior1\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"outstationBehavior1\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"masterBehavior1\", \"hostNameOrIpAddress\": \"outstation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"Outstation1\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"outstationBehavior1\" } ] } ] } Example configuration for multiple outstations The following example is a configuration for two outstations that are on one channel and one outstation that is on a separate channel. Rather than using the default configurations, many configuration options are expressed here. There are two MasterStationBehaviors, one of which increases the data link layer timeout and retry count. This may be needed when operating with network conditions that are less than ideal. Any TCPChannel that references the master station behavior \"poorNetworkConditions\" will use these settings, while TCPChannels that reference \"defaultMasterBehavior\" will use the default settings. There are three OutstationBehaviors defined: \"eventScans-integrityScan-noUnsolicited\", \"busyOutstation\", and \"class1Events\". The behavior \"eventScans-integrityScan-noUnsolicited\" deviates from the default configuration options by disabling unsolicited responses and scanning for events every ten minutes. This type of configuration is useful if the outstation does not support unsolicited events, or maybe it is more efficient to scan for events periodically. The behavior \"busyOutstation\" deviates from the default configuration by increasing the application layer timeout, disabling the time sync, and disabling all integrity scans. Please note that the disabling the integrity scan will prevent discovery and event scans are disabled by default. With this configuration, the adapter will only collect data if it is configured to collect static data . This type of configuration is useful if the outstation is very busy. For instance, the adapter may not be the only master communicating with this outstation, so another master station is responsible for syncing the outstation's time and polling for events. In addition, an integrity scan may put too much burden on the outstation if there are a large number of points. The behavior \"class1Events\" deviates from the default configuration by disabling unsolicited responses, only performing an integrity scan on startup, and only scanning for events from points assigned to class 1. This configuration may be useful if the user is not interested in collecting data for points assigned to class 2 or class 3. There are two TCPChannels configured. One channel has two outstations configured. This channel might represent a connection to a DNP3 gateway at a substation. The other TCPChannel only contains one configured outstation. This might represent a DNP3 device that is in a remote location. { \"masterStationBehaviors\": [ { \"id\": \"poorNetworkConditions\", \"masterAddress\": 1, \"dataLinkLayerTimeout\": \"00:00:05\", \"dataLinkLayerRetries\": 5 }, { \"id\": \"defaultMasterBehavior\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"eventScans-integrityScan-noUnsolicited\", \"enableUnsolicited\": false, \"EventClasses\": [ 1, 2, 3 ], \"eventScanPeriod\": \"00:10:00\" }, { \"id\": \"busyOutstation\", \"applicationLayerTimeout\": \"00:00:30\", \"enableTimeSync\": false, \"integrityScanOnStartup\": false, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\" }, { \"id\": \"class1Events\", \"applicationLayerTimeout\": \"00:00:03\", \"enableUnsolicited\": false, \"integrityScanOnStartup\": true, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\", \"EventClasses\": [ 1 ], \"eventScanPeriod\": \"00:10:00\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"defaultMasterBehavior\", \"hostNameOrIpAddress\": \"substation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"outstation10\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"eventScans-integrityScan-noUnsolicited\" }, { \"id\": \"outstation100\", \"dnpAddress\": 100, \"outstationBehaviorId\": \"busyOutstation\" } ] }, { \"masterStationBehaviorId\": \"poorNetworkConditions\", \"hostNameOrIpAddress\": \"outstation11.scadanetwork.int\", \"port\": 20001, \"outstations\": [ { \"id\": \"Outstation11\", \"dnpAddress\": 11, \"outstationBehaviorId\": \"class1Events\" } ] } ] }"
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "OSIsoft Adapter for DNP3 overview",
    "keywords": "OSIsoft Adapter for DNP3 overview The OSIsoft Adapter for DNP3 is a data-collection component that transfers time-series data from source devices to OSIsoft OMF endpoints in OSIsoft Cloud Services or PI Servers. DNP3 is a communication protocol commonly used in SCADA networks. The protocol is maintained by the DNP Users Group, and it is defined by IEEE Std 1815-2012. The adapter adheres to this standard and operates as a DNP3-L1 compliant master station, which may communicate with compliant outstations by TCP/IP. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter. <!-- # OSIsoft Adapter for DNP3 ======= - [OSIsoft Adapter for DNP3 overview](xref:OSIsoftAdapterForDNP3Overview) - [OSIsoft Adapter for DNP3 principles of operation](xref:OSIsoftAdapterForDNP3PrinciplesOfOperation) - [OSIsoft Adapter for DNP3 supported features](xref:OSIsoftAdapterForDNP3SupportedFeatures) - [Installation](xref:Installation) - [Install the adapter](xref:InstallTheAdapter) - [Install OSIsoft Adapter for DNP3 using Docker](xref:InstallOSIsoftAdapterForDNP3UsingDocker) - [Uninstall the adapter](xref:UninstallTheAdapter) - [Configuration](xref:ModbusConfiguration) - [Configuration tools](xref:ConfigurationTools) - [System components configuration](xref:SystemComponentsConfiguration) - [OSIsoft Adapter for DNP3 data source configuration](xref:OSIsoftAdapterForDNP3DataSourceConfiguration) - [OSIsoft Adapter for DNP3 data selection configuration](xref:OSIsoftAdapterForDNP3DataSelectionConfiguration) - [Egress endpoints configuration](xref:EgressEndpointsConfiguration) - [Health endpoint configuration](xref:HealthEndpointConfiguration) - [Diagnostics configuration](xref:DiagnosticsConfiguration) - [Buffering configuration](xref:BufferingConfiguration) - [Logging configuration](xref:LoggingConfiguration) - [System and adapter configuration](xref:SystemAndAdapterConfiguration) - [Administration](xref:Administration) - [Start and stop an adapter](xref:StartAndStopAnAdapter) - [Start and stop ingress component](xref:StartAndStopIngressComponent) - [Retrieve product version information](xref:RetrieveProductVersionInformation) - [Delete an adapter component](xref:DeleteAnAdapterComponent) - [Health and diagnostics](xref:HealthAndDiagnostics) - [Adapter health](xref:AdapterHealth) - [Device status](xref:DeviceStatus) - [Next health message expected](xref:NextHealthMessageExpected) - [Adapter diagnostics](xref:AdapterDiagnostics) - [System](xref:System) - [Stream count](xref:StreamCount) - [IO rate](xref:IORate) - [Error rate](xref:ErrorRate) - [Egress diagnostics](xref:EgressDiagnostics) -->"
  },
  "V1/Installation/Install OSIsoft Adapter for DNP3 using Docker.html": {
    "href": "V1/Installation/Install OSIsoft Adapter for DNP3 using Docker.html",
    "title": "Install OSIsoft Adapter for DNP3 using Docker",
    "keywords": "Install OSIsoft Adapter for DNP3 using Docker Docker is a set of tools that can be used on Linux to manage application deployments. Note: If you want to use Docker, you must be familiar with the underlying technology and have determined that it is appropriate for your planned use of the DNP3 Adapter. Docker is not a requirement to use the adapter. This topic provides examples of how to create a Docker container with the DNP3 Adapter. Create a startup script for the adapter Using any text editor, create a script similar to one of the following. Note: The script varies slightly by processor. ARM32 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/DNP3_linux-arm/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/DNP3\" } } EOF exec /DNP3_linux-arm/OSIsoft.Data.System.Host ARM64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/DNP3_linux-arm64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/DNP3\" } } EOF exec /DNP3_linux-arm64/OSIsoft.Data.System.Host AMD64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/DNP3_linux-x64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/DNP3\" } } EOF exec /DNP3_linux-x64/OSIsoft.Data.System.Host Name the script dnp3dockerstart.sh and save it to the directory where you plan to create the container. Create a Docker container containing the DNP3 Adapter Create the following Dockerfile in the directory where you want to create and run the container. Note: Dockerfile is the required name of the file. Use the variation according to your operating system: ARM32 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY dnp3dockerstart.sh / RUN chmod +x /dnp3dockerstart.sh ADD ./DNP3_linux-arm.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] ARM64 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY dnp3dockerstart.sh / RUN chmod +x /dnp3dockerstart.sh ADD ./DNP3_linux-arm64.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] AMD64 (x64) FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY dnp3dockerstart.sh / RUN chmod +x /dnp3dockerstart.sh ADD ./DNP3_linux-x64.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] Copy the DNP3_linux-\\<platform>.tar.gz file to the same directory as the Dockerfile . Copy the dnp3dockerstart.sh script to the same directory as the Dockerfile . Run the following command line in the same directory ( sudo may be necessary): docker build -t dnp3adapter . Run the DNP3 Adapter Docker container REST access from the local host to the Docker container Complete the following to run the container: Use the docker container image dnp3adapter previously created. Type the following in the command line ( sudo may be necessary): docker run -d --network host dnp3adapter Port 5590 is accessible from the host and you can make REST calls to DNP3 Adapter from applications on the local host computer. In this example, all data stored by the DNP3 Adapter is stored in the container itself. When the container is deleted, the data stored is also deleted. Provide persistent storage for the Docker container Complete the following to run the container: Use the docker container image dnp3adapter previously created. Type the following in the command line ( sudo may be necessary): docker run -d --network host -v /dnp3:/usr/share/OSIsoft/ dnp3adapter Port 5590 is accessible from the host and you can make REST calls to the DNP3 Adapter from applications on the local host computer. In this example, all data that would be written to the container is instead written to the host directory and the host directory is a directory on the local machine, /dnp3 . You can specify any directory. Port number change To use a different port other than 5590 , you can specify a portnum variable on the docker run command line. For example, to start the adapter using port 6000 instead of 5590 , use the command line: docker run -d -e portnum=6000 --network host dnp3adapter This command accesses the REST API with port 6000 instead of port 5590 . The following curl command returns the configuration for the container. curl http://localhost:6000/api/v1/configuration Remove REST access to the Docker container If you remove the --network host option from the docker run command, REST access is not possible from outside the container. This may be valuable when you want to host an application in the same container as the DNP3 Adapter, but do not want to have external REST access enabled."
  },
  "V1/Installation/System requirements.html": {
    "href": "V1/Installation/System requirements.html",
    "title": "System requirements",
    "keywords": "System requirements OSIsoft Adapter for DNP3 is supported on a variety of platforms and processors. Install kits are available for the following platforms: Operating System Installation Kit Processor(s) Windows 10 Pro Windows Server Core 2019 Windows Server Core 2016 DNP3_win10-x64.msi Intel/AMD 64-bit processors Debian 9 or later x64 DNP3_linux-x64.deb Intel/AMD 64-bit processors Debian 9 or later arm32 DNP3_linux-arm.deb Arm 32-bit processors Debian 9 or later arm64 DNP3_linux-arm64.deb Arm 64-bit processors Alternatively, you can use tar.gz files with binaries to build your own custom installers or containers for Linux. For more information on installation of the OSIsoft Adapter for DNP3 with a Docker container, see Install OSIsoft Adapter for DNP3 using Docker ."
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the OSIsoft adapter administration level functions, you can start and stop an adapter service and the individual adapter ingress components. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl , a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can accomplish data retrieval steps ( GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When you remove an adapter component, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data remain on the respective endpoints. Complete the following steps to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Run a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/<ComponentId> Note: You must make an empty DELETE command against the Id of the component you want to delete. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Delete OpcUa1 adapter component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1\" File relocation All configuration and log files are renamed and moved. The files are renamed according to the timestamp of removal, for example FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Configuration/Removed Log files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Logs/Removed In the following example, one Modbus adapter service is installed on a particular Windows node with the name ModbusService1 . A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/ ComponentId DELETE Deletes specified component Note: Replace ComponentId with the Id of the component that you want to delete."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core framework, and the operating system that the adapter is running on. Complete the following steps to retrieve the product version information of an OSIsoft adapter: Use any of the Configuration tools capable of making HTTP requests. Run a GET command to the following endpoint: http://localhost:5590/api/v1/Diagnostics/ProductInformation Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Get product information for adapter hosted on port 5590 curl -d \"\" -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation Example result: { \"Application Version\": \"1.1.0.30\", \".Net Core Version\": \".NET Core 3.1.1\", \"Operating System\": \"Microsoft Windows 10.0.17134\" }"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete the procedure appropriate for your operating system to start or stop an adapter service: Windows Open Windows services. Select OSIsoft Adapter for AdapterName , for example OSIsoft Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following: Example: Start OSIsoft Adapter for OPC UA systemctl start OSIsoft Adapter for OPC UA Example: Stop OSIsoft Adapter for Modbus TCP systemctl stop OSIsoft Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component To control data ingress, you can start and stop the ingress components of an adapter whenever necessary. By default, all currently configured ingress components are started. Start an ingress component Complete the following steps to start an individual ingress component: Use any of the Configuration tools capable of making HTTP requests. Run a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Start the OpcUa1 ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/OpcUa1/Start\" Stop an ingress component Complete the following steps to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Run a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Stop the Modbus1 ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/Modbus1/Stop\""
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/ARCHIVE/Diagnostics configuration.html": {
    "href": "V1/main/V1/ARCHIVE/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration You can configure OSIsoft adapters to produce and store diagnostics data at a designated health endpoint. For more information about available diagnostics data, see Adapter diagnostics . Configure diagnostics Start any of the Configuration tools capable of making HTTP requests. Run a PUT command to the following endpoint and set the enableDiagnostics parameter to either true or false : http://localhost:5590/api/v1/configuration/system/diagnostics Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \"enableDiagnostics\":true }\" -X PUT \"http://localhost:5590/api/v1/configuration/system/diagnostics\" Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters The following parameters are available for configuring diagnostics: Parameter Required Type Description EnableDiagnostics Required boolean Determines whether Diagnostics are enabled Example Retrieve the diagnostics configuration Example using curl : curl -X GET \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration You can configure OSIsoft adapters to buffer data egressed from the adapter to endpoints. Buffering is configured through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless it is necessary. Changes to the buffering configuration parameters only take effect during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in the JSON format. For content structure, see the sample output in Examples - Retrieve the buffering configuration . For a table of all available parameters, see Buffering parameters . Save the file. For example, Buffering.json . Use any of the Configuration tools capable of making HTTP requests and run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/buffering Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"@Buffering.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" Note: Run this command from the same directory where the file is located. Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnablePersistentBuffering Optional boolean Enables or disables on-disk buffering Default: True Note: If you disable persistent buffering, in-memory buffering is used. In-memory buffering is limited by value in the MaxBufferSizeMB property. MaxBufferSizeMB Optional integer Defines the maximum size of the buffer files that are persisted on disk or used in memory when EnablePersistentBuffering is set to false per configured endpoint. The unit is specified in MB (1 Megabyte = 1048576 bytes). Consider the capacity and the type of storage medium to determine a suitable value for this parameter. Allowed values: [1, 2147483647] Default: 1024 BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Consider the access-control list (ACL) when you set this parameter. Allowed value: Valid path to a folder location in the file system Default: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterInstance}\\Buffers Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Buffers Examples The following examples are buffering configurations made through the curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Buffers\", \"maxBufferSizeMB\": 1024, \"enablePersistentBuffering\": true } 200 OK response indicates success. Update MaxBufferSizeMb parameter curl -d \"{ \"MaxBufferSizeMB\": 100 }\" -H \"Content-Type: application/json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering GET Gets the buffering configuration api/v1/configuration/system/buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools You can configure OSIsoft adapters with the EdgeCmd utility, OSIsoft's proprietary tool for configuring adapters, or a commonly used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . REST tools The following tools are available to make REST calls: curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. You can script curl with Bash or PowerShell on Linux or Windows and you can use it to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) . Postman Postman is a REST tool for systems with GUI components. OSIsoft adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about OSIsoft adapter REST APIs. For more information, see Postman (https://www.postman.com/) ."
  },
  "V1/main/V1/Configuration/Data filters configuration.html": {
    "href": "V1/main/V1/Configuration/Data filters configuration.html",
    "title": "Data filters configuration",
    "keywords": "Data filters configuration OSIsoft adapters can be configured to perform data filtering to save network bandwidth. Every data item in the data selection configuration can be assigned the id of a data filter. The adapter will then filter data for those data items based on the data filter configuration. Configure data filters Complete the following steps to change the data filters configuration: Using any text editor, create a file that contains the data filters configuration in the JSON format. For content structure, see Data filters example . For all available parameters, see Data filters parameters . Save the file, for example as Component_DataFilters.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/DataFilters . Note: Replace <ComponentId> with the ComponentId of the adapter, for example Modbus1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"@ComponentId_DataFilters.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/DataFilters\" Note: Run this command from the same directory where the file is located. On successful execution, the data filters change takes effect immediately during runtime. Data filters schema The full schema definition for the data filters configuration is in the AdapterName_DataFilters_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Data filters parameters The following parameters are available for configuring data filters: Parameter Required Type Description Id Required String Unique identifier for the data filter. AbsoluteDeadband Optional Double Specifies the absolute change in data value that should cause the current value to pass the filter test. Note: You must specify at least either AbsoluteDeadband or PercentChange . PercentChange Optional Double Specifies the percent change from previous value that should cause the current value to pass the filter test. Note: You must specify at least either AbsoluteDeadband or PercentChange . ExpirationPeriod Optional TimeSpan The length in time that can elapse after an event before automatically storing the next event. The expected format is HH:MM:SS.###. Data filters example [ { \"Id\": \"DuplicateData\", \"AbsoluteDeadband\": 0, \"PercentChange\": null, \"ExpirationPeriod\": \"01:00:00\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataFilters GET Gets all configured data filters. api/v1/configuration/ ComponentId /DataFilters DELETE Deletes all configured data filters. api/v1/configuration/ ComponentId /DataFilters POST Adds an array of data filters or a single data filter. Fails if any data filter already exists. api/v1/configuration/ ComponentId /DataFilters PUT Replaces all data. api/v1/configuration/ ComponentId /DataFilters PATCH Allows partial updating of configured data filter. api/v1/configuration/ ComponentId /DataFilters/ id GET Gets configured data filter by id . api/v1/configuration/ ComponentId /DataFilters/ id DELETE Deletes configured data filter by id . api/v1/configuration/ ComponentId /DataFilters/ id PUT Replaces data filter by id . Fails if data filter does not exist. Note: Replace ComponentId with the Id of your adapter component, for example Modbus1."
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. OSIsoft Cloud Services (OCS) and PI servers through PI Web API are supported destinations. An egress endpoint represents a destination to which data is sent. You can specify multiple endpoints. Every egress endpoint is run independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoint configurations, see REST URLs . Complete the following steps to configure egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in the JSON format. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file. For example, OmfEgress_DataEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and run the appropriate command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Examples using curl : Note: Run the commands from the same directory where the file is located. Add endpoints curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" Delete an endpoint curl -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" Update an endpoint curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" View endpoints curl -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json file located in one of the folders listed below: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Description Id Optional string Unique identifier Endpoint Required string Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI Server. Username Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint Password Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Note: Only use for testing with self-signed certificates. Defaults to true Examples The following examples are valid egress configurations: Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API [{ \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints PATCH Allows partial updating of configured endpoints. Note: The request must be an array containing one or more endpoints. Each endpoint in the array must include its Id . api/v1/configuration/omfegress/DataEndpoints/{Id} GET Gets configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} DELETE Deletes configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} PUT Updates or creates a new endpoint with the specified Id api/v1/configuration/omfegress/DataEndpoints/{Id} PATCH Allows partial updating of configured endpoint by Id Egress execution details After configure an egress endpoint, egress is immediately run for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers are egressed. After that only new or changed types or containers are egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If you delete an egress endpoint, data flow immediately stops for that endpoint. Buffered data in a deleted endpoint is permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item results in the message failing. Types, containers, and data are egressed as long as the destination continues to respond to HTTP requests."
  },
  "V1/main/V1/Configuration/General configuration.html": {
    "href": "V1/main/V1/Configuration/General configuration.html",
    "title": "General configuration",
    "keywords": "General configuration You can configure OSIsoft adapters to produce and store diagnostics data at a designated health endpoint, and to send metadata for created streams. For more information about available diagnostics data, see Adapter diagnostics and Egress diagnostics . For more information about available metadata, see Adapter Metadata . Configure general Start any of the Configuration tools capable of making HTTP requests. Run a PUT command to the following endpoint, setting the enableDiagnostics and enableMetadata parameters to either true or false : http://localhost:5590/api/v1/configuration/system/general Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \\\"enableDiagnostics\\\":true, \\\"enableMetadata\\\":false }\" -X PUT \"http://localhost:5590/api/v1/configuration/system/general\" General schema The full schema definition for the general configuration is in the System_General_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas General parameters The following parameters are available for configuring general: Parameter Required Type Description EnableDiagnostics Optional boolean Determines if diagnostics are enabled EnableMetadata Optional boolean Determines if metadata are sent Example Retrieve the general configuration Example using curl : curl -X GET \"http://localhost:{port}/api/v1/configuration/system/general\" Sample output: { \"EnableDiagnostics\": true, \"EnableMetadata\": false } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/General GET Gets the general configuration api/v1/configuration/system/General PUT Replaces the existing general configuration api/v1/configuration/system/General PATCH Allows partial updating of general configuration"
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration You can configure OSIsoft adapters to produce and store health data at a designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OMF endpoint where adapter health information is sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in the JSON format. For content structure, see Examples . For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file. For example, HealthEndpoints.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint. Note: 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints\" PUT endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints/{Id} Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints/OCS\" Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json file located in one of the folders listed below: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint TokenEndpoint Optional for OCS endpoints string Retrieves an OCS token from an alternative endpoint ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends keeping this set to the default, true, in production environments. Examples OCS endpoint { \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } PI Web API endpoint { \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/healthEndpoints GET Gets all configured health endpoints api/v1/configuration/system/healthEndpoints DELETE Deletes all configured health endpoints api/v1/configuration/system/healthEndpoints POST Adds an array of health endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/system/healthEndpoints PUT Replaces all health endpoints. Note: Requires an array of endpoints api/v1/configuration/system/healthEndpoints PATCH Allows partial updating of configured health endpoints Note: The request must be an array containing one or more health endpoints. Each health endpoint in the array must include its Id . api/v1/configuration/system/healthEndpoints/ Id GET Gets configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ Id DELETE Deletes configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ Id PUT Updates or creates a new health endpoint with the specified Id api/v1/configuration/system/healthEndpoints/ Id PATCH Allows partial updating of configured health endpoint by Id Note: Replace Id with the Id of the health endpoint."
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration OSIsoft adapters write daily log messages for the adapter, the system, and OMF egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters{AdapterInstance}\\Logs • Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following steps to change the logging configuration: Using any text editor, create a file that contains the logging configuration in the JSON format. For content structure, see Example . For all available parameters, see Logging parameters . Save the file. For example, Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter. For example, OpcUa1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Logging\" On successful execution, the log-level change takes effect immediately during runtime. The other configurations (log file size and file count) are updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file reverts to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json located in one of the folders listed below: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description logLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace, Debug, Information, Warning, Error, Critical, None. For detailed information about the logLevels, see LogLevel . logFileSizeLimitBytes Optional integer The maximum size (in bytes) of log files that the service will create for the component. It must be a positive integer. logFileCountLimit Optional integer The maximum number of log files that the service will create for the component. It must be a positive integer. LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages should not be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information like the following can be useful for diagnosing potential application errors: - Version information related to the software at startup - External services used - Data source connection string - Number of measurements - Egress URL - Change of state “Starting” or “Stopping” - Configuration Warning Logs that highlight an abnormal or unexpected event in the application flow that does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention, but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity and not an application-wide failure. It can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. None Logging is disabled for the given component. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the default for a component on install: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging PUT Updates the system logging configuration api/v1/configuration/ ComponentId /Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ ComponentId /Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component. For example, Modbus1 or OpcUa1."
  },
  "V1/main/V1/Configuration/Schedules configuration.html": {
    "href": "V1/main/V1/Configuration/Schedules configuration.html",
    "title": "Schedules configuration",
    "keywords": "Schedules configuration You can configure OSIsoft adapters to run scans based on a schedule. If the adapter supports schedules, each data item in the data selection configuration can be assigned a schedule. The adapter will then sample data for those data items at the scheduled time. Note: When the adapter framework scheduler misses or skips a scan due to any reason, either one of the following messages is printed: Scan skipped for schedule id <Id> or Scan missed for schedule <id> . Configure schedules Complete the following steps to change the schedules configuration: Using any text editor, create a file that contains the schedules configuration in the JSON format. For content structure, see Example . For all available parameters, see Schedules parameters . Save the file. For example, Component_Schedules.json*. Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Schedules . Note: Replace <ComponentId> with the ComponentId of the adapter. For example, Modbus1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@Component_Schedules.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Schedules\" On successful execution, the schedules change takes effect immediately during runtime. Schedules schema The full schema definition for the schedules configuration is in the AdapterName_Schedules_schema.json file located in one of the folders listed below: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Schedules parameters The following parameters are available for configuring schedules: Parameter Required Type Description Id Required string Unique identifier for the schedule Period Required string The data sampling rate of the schedule. The expected format is HH:MM:SS.###. Offset Optional string The offset from the midnight when the schedule starts. The expected format is HH:MM:SS.### Example [ { \"Id\": \"schedule1\", \"Period\": \"00:00:01.500\", \"Offset\": \"00:02:03\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /Schedules GET Gets all configured schedules api/v1/configuration/ ComponentId /Schedules DELETE Deletes all configured schedules api/v1/configuration/ ComponentId /Schedules POST Adds an array of schedules or a single schedule. Fails if any schedule already exists api/v1/configuration/ ComponentId /Schedules PUT Replaces all schedules api/v1/configuration/ ComponentId /Schedules/ id GET Gets configured schedule by id api/v1/configuration/ ComponentId /Schedules/ id DELETE Deletes configured schedule by id api/v1/configuration/ ComponentId /Schedules/ id PUT Replaces schedule by id . Fails if schedule does not exist api/v1/configuration/ ComponentId /Schedules/ id PATCH Allows partial updating of configured schedule by id Note: Replace ComponentId with the Id of your adapter component. For example, Modbus1."
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration You can configure the system and adapter components together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in the JSON format. For content structure, see Example . Save the file. For example, SystemAdapter.config.json . Use any of the Configuration Tools capable of making HTTP requests and run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@SystemAdapter.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error messages are returned in the result. Example Note : The following is an example configuration, it does not necessarily represent the configuration of the adapter that you are currently using. The data source and data selection configurations are different for every adapter. Sample OPC UA adapter configuration { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/OpcUa/Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form where cryptographic key material is stored separately in a secure location. If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system individually using REST, but you can also configure the system as a whole with a single REST call. Configure system components The configuration of system components includes adding, updating, and deleting components. Add a system component Complete the following steps to add a new component to the system: Using any text editor, create a file that contains the component to be added to the system in the JSON format. For content structure, see Examples . For a table of all available parameters, see System components parameters . Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components, but only a single OmfEgress component is supported. The following example adds a Modbus TCP adapter: { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter to be added. Save the file. For example, AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint. Note: 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/system/components Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/components\" PUT endpoint: http://localhost:5590/api/v1/configuration/system/components/<componentId> Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components/Modbus1\" After the curl command completes successfully, you can configure or use the new component. Update system components Complete the following steps to update the system components. For example, by adding or deleting components. Using any text editor, create a file that contains the current system components configuration. For information on how to retrieve the system components configuration, see REST URLs . Delete or add components as you need. Note: You cannot delete the OmfEgress component. Save the file. For example, UpdateComponents.json Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@UpdateComponents.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" Delete a system component Complete the following steps to delete an existing component: Start any of the Configuration tools capable of making HTTP requests. Run a DELETE command to the following endpoint, replacing <ComponentId> with the ID of the component that you want to delete: http://localhost:5590/api/v1/configuration/system/components/<ComponentId>/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. Delete OpcUa1 component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1/\" All the logs and configurations files for the deleted components are moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The full schema definition for the system components configuration is in the System_Components_schema.json file located in one of the folders listed below: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components: Parameters Required Type Description ComponentId Required string The ID of the component. It can be any alphanumeric string, for example OmfEgress. A properly configured ComponentID follows these rules: Cannot contain leading or trailing space Cannot use the following characters: > < / : ? # [ ] @ ! $ & * \\ \" ( ) \\\\ + , ; = \\| ` { } ComponentType Required string The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components GET Retrieves the system components configuration api/v1/configuration/system/components POST Adds a new component to the system configuration api/v1/configuration/system/components PUT Updates the system components configuration api/v1/configuration/system/components/ componentId DELETE Deletes a specific component from the system components configuration api/v1/configuration/system/components/ componentId PUT Creates a new component with the specified componentId in the system configuration"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data that is sent to all health endpoints. The System_Diagnostics.json file contains a flag that determines whether diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Every minute, dynamic data is sent to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The Elements root contains a link to an Adapters node. This is the root node for all adapter instances. Below Adapters , you fill find one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: {ComputerName}.{ServiceName} . For example, in the following image, MachineName is the computer name and OpcUa is the service name. To see the System.Diagnostics values, click on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics streams: IO rate The Diagnostics.Egress.IORate dynamic type includes the following values, which are logged in a stream with the Id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate . IORate includes only sequential data successfully sent to an egress endpoint. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.ErrorRate . Property Type Description timestamp string Timestamp of event ErrorRate double 1-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.IORate . IORate includes only sequential data collected from a data source. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes the following values, which are logged in a stream with the Id {componentid}.StreamCount . The StreamCount and TypeCount include only types and streams created for sequential data received from a data source. Property Type Description timestamp string Timestamp of event StreamCount int Number of streams created by the adapter instance TypeCount int Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the Id System.Diagnostics . This diagnostic stream contains system level information related to the host platform that the adapter is running on. Property Type Description timestamp string Timestamp of event ProcessIdentifier int Process Id of the host process StartTime string Time at which the host process started WorkingSet long Amount of physical memory in bytes, allocated for the host process TotalProcessorTime double Total processor time for the host process expressed in seconds TotalUserProcessorTime double User processor time for the host process expressed in seconds TotalPrivilegedProcessorTime double Privileged processor time for the host process expressed in seconds ThreadCount int Number of threads in the host process HandleCount int Number of handles opened by the host process ManagedMemorySize double Number of bytes currently thought to be allocated in managed memory Unit of Measure = megabytes PrivateMemorySize double Amount of paged memory in bytes allocated for the host process Unit of Measure = megabytes PeakPagedMemorySize double Maximum amount of memory in the virtual memory paging file in bytes used by the host process. Unit of Measure = megabytes StorageTotalSize double Total size of the storage medium in use by the system Unit of Measure = megabytes StorageFreeSpace double Free space available Unit of Measure = megabytes Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data that can be egressed to different health endpoints. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it to configured PI servers for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is time-series data that is stored in PI points on a PI Data Archive. You can see it in the AF hierarchy as PI point data reference attributes. OSIsoft Cloud Services does not currently provide a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data is stored. Each value is its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of Good is expected. Property Type Description Time string Timestamp of the event DeviceStatus string The value of the DeviceStatus The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and that data flows to the configured OMF endpoints. For more information on available health data, see Adapter health . OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics to true . For more information on available diagnostics data, see Adapter diagnostics ."
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected is sent by an individual adapter data component on a periodic basis while it is functioning properly. This value is a timestamp that indicates when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, and so on. Property Type Description Time string Timestamp of the event NextHealthMessageExpected string Timestamp when next value is expected"
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter You can install adapters on either a Windows or Linux operating system. Before installing the adapter, see Installation prerequisites to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following steps to install an OSIsoft adapter on a Windows computer: Download the Windows .msi file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Run the .msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590 . Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned. Linux Complete the following steps to install an OSIsoft adapter on a Linux computer: Download the appropriate Linux distribution file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo app install command. Examples : To install the Linux ARM Debian package, run the command sudo apt install ./Modbus_linux-arm.deb To install the Linux x64 package, run the command sudo apt install ./Modbus_linux-x64.deb Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned."
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Alternatively, you can build custom installers or containers for Linux. For more information, see the Docker instructions in the documentation of the respective adapter."
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete the procedure appropriate for your operating system to uninstall an OSIsoft adapter: Windows To delete the OSIsoft adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not deleted by the uninstall process. Optional: To delete data, configuration, and log files, delete the directory %ProgramData%\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to the configuration and log files. Linux To delete OSIsoft adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove osisoft.adapters.<AdapterName> Optional: To delete data, configuration, and log files, delete the directory /usr/share/OSIsoft/Adapters/AdapterName . This deletes all data processed by the adapter and configuration and log files. Alternatively, run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/Metadata/Adapter Metadata.html": {
    "href": "V1/main/V1/Metadata/Adapter Metadata.html",
    "title": "Adapter metadata",
    "keywords": "Adapter metadata If the option to send metadata is set to true in the General configuration , adapter streams created by the ingress components include the following metadata: Datasource: {ComponentId} AdapterType: {ComponentType} ComponentId corresponds to the adapter components' data source configured in the Components configuration . ComponentType corresponds to the adapter type. For example, Modbus or OpcUa. Metadata for health and diagnostics streams If you configure a health endpoint and enable metadata, they are included in the health streams ( Device status and Next health message expected ) together with ComponentId and ComponentType . If you enable diagnostics in General configuration , metadata are included in the diagnostics streams ( Stream count , IO rate , Error rate ) together with ComponentId and ComponentType . The adapter may also send its own stream metadata not including health and diagnostics streams. For more information about what custom metadata is included in each stream, see the user guide for your adapter. Note: Metadata is only sent for streams created by the ingress components. Currently, the only endpoint that persists sent metadata is OCS (OSIsoft Cloud Services). Metadata in OCS"
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Technical support and feedback.html": {
    "href": "V1/main/V1/Technical support and feedback.html",
    "title": "Technical support and feedback",
    "keywords": "Technical support and feedback OSIsoft provides several ways to report issues and provide feedback on OSIsoft adapters. Technical support For technical assistance with OSIsoft adapters, contact OSIsoft Technical Support through the OSIsoft Customer Portal . We can help you identify the problem, provide workarounds and address any concerns you may have. Remote access to your facilities may be necessary during the session. Note: You must have an account set up in the OSIsoft Customer Portal before you can open a case. If you do not have a portal account, see How to Get a Login to OSIsoft Customer Portal . Alternatively, call OSIsoft Technical Support at +1 510-297-5828. When you contact OSIsoft Technical Support, be prepared to provide this information: Product name, version, and build numbers Details about your computer platform (CPU type, operating system, and version number) Time that the difficulty started Log files at that time Details of any environment changes prior to the start of the issue Summary of the issue, including any relevant log files during the time the issue occurred <!--To view a brief primer on OSIsoft adapters, see the [OSIsoft adapters playbook](https://customers.osisoft.com/s/knowledgearticle?knowledgeArticleUrl=Playbook-OSIsoft-adapters) in the OSIsoft Customer Portal.--> <!--## Product feedback--> <!--To submit product feedback for OSIsoft adapters, visit the [OSIsoft adapters feedback page](https://feedback.osisoft.com/forums/123456-osisoft-adapters). The product team at OSIsoft regularly monitors the page.--> Documentation feedback To submit documentation feedback for OSIsoft adapters, send an email to documentation@osisoft.com . Be sure to include the following information with your feedback: Product name and version Documentation topic URL Details of the suggestion or error The technical documentation team at OSIsoft will review and respond to your feedback."
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/OSIsoft Adapter for DNP3 overview/OSIsoft Adapter for DNP3 principles of operation.html": {
    "href": "V1/OSIsoft Adapter for DNP3 overview/OSIsoft Adapter for DNP3 principles of operation.html",
    "title": "OSIsoft Adapter for DNP3 principles of operation",
    "keywords": "OSIsoft Adapter for DNP3 principles of operation Connectivity and Interoperability The DNP3 Adapter may connect to one or more DNP3 compliant outstations via TCP/IP connections. The total number of outstations that the DNP3 Adapter may connect to will vary across different installation environments. The DNP3 Adapter is designed to operate with Level 1 (DNP3–L1) compliance, which defines minimum requirements for all DNP3 compliant devices. However, the adapter does make use of some Level 2, Level 3, and Level 4 functions. Some DNP3 compliant devices may not support these same features. Any functionality described in this documentation that is not required for Level 1 compliance will be noted as such. Please check the outstation documentation prior to using these features, as the adapter will need to be configured to only use the supported features of the outstation. Adapter Configuration In order for the DNP3 Adapter to start data collection, you need to configure the adapter by defining the following: Data source: Provide the information required to connect to your DNP3 compliant outstations. Data selection: Select the DNP points on the outstations you want the adapter to collect data from. Logging: Set up the logging attributes to manage the adapter logging behavior. For more infomation, see OSIsoft Adapter for DNP3 data source configuration and OSIsoft Adapter for DNP3 data selection configuration . Stream creation The DNP3 adapter creates types at startup. One stream is created for every selected DNP point represented by an item in the data selection configuration. Each stream contains two properties: Property name Data type Description Timestamp DateTime Timestamp of the value update for the DNP point. Value Specified on the data selection configuration Value of the DNP point. Certain metadata are sent with each stream created. Metadata common for every adapter type are ComponentId : Specifies the type of adapter, for example DNP3 ComponentType : Specifies the data source, for example DNP3_1 Each stream created for a given DNP point has a unique identifier or \"Stream ID\". If you specify a custom stream ID for the DNP point in data selection configuration, the adapter uses that stream ID to create the stream. If the stream ID is not specified, the adapter will use the DefaultStreamIdPattern in the data source configuration to determine the stream ID. Discovery The DNP3 adapter can discover points on your DNP3 outstation by performing an integrity scan . Discovery will populate your data selection configuration with items that represent points on the outstation. These items will default as unselected, so the user may make changes to these items before selecting them. The adapter can only discover points that are assigned to Class 0, Class 1, Class 2, or Class 3 on the outstation. Discovery may be expensive in terms of bandwidth and outstation resources, so the adapter will only perform discovery for an outstation when the following criteria is met: The outstation is configured in the data source configuration. The adapter is configured to perform an integrity scan for that outstation. The data selection configuration contains no items that correlate to that outstation, selected or unselected. To discover a new outstation, simply add the outstation to the data source configuration and configure an integrity scan to run periodically or on startup. The adapter will use the first integrity scan as a means for discovery. To configure a new outstation without triggering a discovery, you can add one or more selection items to correspond with the outstation. The items may be selected or unselected. Alternatively, you can configure the outstation behavior so that no integrity scan will be performed. Without an integrity scan, discovery will not be possible. Data collection The DNP3 adapter can collect two different types of data from DNP3 compliant outstations: static data and event data. Static data The DNP3 specification defines static data as the current value of a DNP point at the time of a request. The DNP3 adapter may be configured to request static data by polling the outstation(s) for a range of points that share an object group and variation, which are configured in the data selection configuration. Static data will be reported with the current time of the adapter machine. When polling for static data at predefined rate, it is possible that quickly changing data may be missed by the adapter. It is also possible that the adapter will receive multiple values representing the same event but with different timestamps. The adapter makes a request for the current value of specific points as configured in the Data Selection configuration file. The adapter will request this data via a range scan, which will request the static data for a range of point indices that share a group and variation, as configured in the data selection configuration. The outstation should report the current value of each point, but the outstation is not required to report using the requested object variation. If the outstation responds with a different variation than what the adapter has requested, the adapter will still send the data it receives. This could lead to differences in the reported value versus what is expected in terms of precision and status. Support for requesting static data for DNP3 points via a range scan is at least a Level 2 function, and some groups and variations may be considered L3 or L4 functionality. Because of this, it is important to verify that your outstation supports this functionality before configuring the adapter to collect data in this manner. Some DNP3-L1 compliant outstations may optionally support this type of scan. Event data The DNP3 specification defines event data as the information that is retained regarding an event. An event is defined by the DNP3 specification as the occurrence of something significant happening. What constitutes an event may vary depending on the implementation of the outstation. Typically, an event will result in a value change for a DNP point, although it is possible for an event to occur that does not change the value of any point on the outstation. Event data is saved at the outstation(s) and should be kept until the adapter confirms that it has received the event object. The event object is the description of the event that the adapter should receive from the outstation(s). The event object may contain the value, time, and status code relating to the event and corresponding point. The exact information contained in the object will be dependent on both the point type and variation, which are defined in the DNP3 specification. DNP3 events belong to one of three different classes of data: Class 1 , Class 2 , or Class 3 . These event classes may be used to group events by priority, though neither the DNP3 adapter nor the DNP3 specification assign significance to the three event classes. According to the DNP3 specification, all DNP3 – L1 compliant outstations shall accept read requests for event class data. Event Scans The adapter may be configured to request event data via an event scan . During an event scan , the adapter will poll the outstation(s) for the event data from each of the configured event classes. The event classes and the polling interval may be configured in the data source configuration . Event scans offer several advantages over polling for static data. When polling for static data, it is possible to miss value changes for points on the outstation; however, event scans will ensure that each outstation reports every event to the adapter. Similarly, even when polling quickly, some events could be missed if they do not change the value of the DNP point. If bandwidth is a concern, the adapter may make efficient use of the network by only requesting event data. When polling for static data, the outstation may report unchanging data unnecessarily, whereas event scans should only return new events. It is important to configure the adapter to perform Event Scans at an interval that is not long enough to allow the outstations’ event buffers to become full. Refer to the documentation for each specific outstation to determine what constitutes an event and how much time it will take before the buffer becomes full. Unsolicited Events In addition to the event scans above, the adapter may be configured to receive unsolicited responses containing event data. An unsolicited response is a message sent from an outstation that the adapter did not explicitly request. If the adapter is configured to receive unsolicited data, outstations that support sending unsolicited data should report event data to the adapter as it occurs. This could eliminate the need for the adapter to poll the outstation(s) for data. The decision to configure the adapter to receive unsolicited data, or to perform Event Scans should be carefully considered. Integrity Scans The DNP3 adapter can be configured to perform an integrity scan on startup, when the outstation's event buffer overflows, and/or at a defined interval. During an integrity scan , the adapter will poll the outstation(s) for events, then the current value of all points that are assigned to one of the event classes (or class 0). The adapter performs an integrity scan by polling Object Group 60. If bandwidth or outstation performance is a concern, carefully consider the value of an integrity scan, as the outstation may respond with data for many more points than the adapter is configured to collect data for. The adapter will simply discard any data that it receives without a corresponding data selection item. To retrieve the current value of any points not assigned to an event class, the adapter will need to perform a static scan ."
  },
  "V1/OSIsoft Adapter for DNP3 overview/z (Placeholder) OSIsoft Adapter for DNP3 supported features.html": {
    "href": "V1/OSIsoft Adapter for DNP3 overview/z (Placeholder) OSIsoft Adapter for DNP3 supported features.html",
    "title": "OSIsoft Adapter for DNP3 supported features",
    "keywords": "OSIsoft Adapter for DNP3 supported features"
  },
  "V1/OSIsoft_Adapter_for_DNP3_overview.html": {
    "href": "V1/OSIsoft_Adapter_for_DNP3_overview.html",
    "title": "OSIsoft Adapter for DNP3 overview",
    "keywords": "OSIsoft Adapter for DNP3 overview The OSIsoft Adapter for DNP3 is a data-collection component that transfers time-series data from source devices to OSIsoft OMF endpoints in OSIsoft Cloud Services or PI Servers. [...] DNP3 is a communication protocol commonly used in SCADA networks. The protocol is maintained by the DNP Users Group, and it is defined by IEEE Std 1815-2012. The adapter adheres to this standard and operates as a DNP3-L1 compliant master station, which may communicate with compliant outstations via TCP/IP. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  }
}