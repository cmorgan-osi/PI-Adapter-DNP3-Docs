{
  "V1/main/V1/Troubleshooting/Data buffering.html": {
    "href": "V1/main/V1/Troubleshooting/Data buffering.html",
    "title": "Data buffering",
    "keywords": "Data buffering"
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When an adapter component is removed, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data will remain on respective endpoints. Complete the following procedure to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/<ComponentId> Note: An empty DELETE command must be made against the Id of the component to be deleted. Example using curl - Delete OpcUa1 adapter component curl -v -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1\" File relocation All configuration and log files will be renamed and moved.The files are renamed according to the timestamp of removal, for example FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Configuration/Removed Log files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Logs/Removed In the following example, one Modbus Adapter service is installed on a particular Windows node with the name ModbusService1. A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/{id} DELETE Deletes specified component Note: {id} is the ID of the component that you want to remove, for example OpcUa1 or Modbus1."
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the OSIsoft adapter administration level functions, you can start and stop an adapter and the ingress component. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl, a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see EdgeCmd utility . To validate successful configurations, you can accomplish data retrieval steps (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/Introduction to OSIsoft Adapter for DNP3/Supported features.html": {
    "href": "V1/Introduction to OSIsoft Adapter for DNP3/Supported features.html",
    "title": "Supported Features",
    "keywords": "Supported Features"
  },
  "V1/Introduction to OSIsoft Adapter for DNP3/OSIsoft Adapter for DNP3 operational overview.html": {
    "href": "V1/Introduction to OSIsoft Adapter for DNP3/OSIsoft Adapter for DNP3 operational overview.html",
    "title": "OSIsoft Adapter for DNP3 operational overview",
    "keywords": "OSIsoft Adapter for DNP3 operational overview"
  },
  "V1/Introduction to OSIsoft Adapter for DNP3/Introduction to OSIsoft Adapter for DNP3.html": {
    "href": "V1/Introduction to OSIsoft Adapter for DNP3/Introduction to OSIsoft Adapter for DNP3.html",
    "title": "Introduction to OSIsoft Adapter for DNP3",
    "keywords": "Introduction to OSIsoft Adapter for DNP3"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Access EdgeCmd utility.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Access EdgeCmd utility.html",
    "title": "Access EdgeCmd utility",
    "keywords": "Access EdgeCmd utility The EdgeCmd utility locations used in the following procedures are based on the installation instructions in EdgeCmd utility . Windows Complete the following procedure to access EdgeCmd utility on Windows: Open a command prompt. Type the following path in the command prompt and press Enter: C:\\Program Files\\OSIsoft\\EdgeCmd\\edgecmd.exe Note: Specify the full path when you use EdgeCmd utility on Windows. Linux Complete the following procedure to access EdgeCmd utility on Linux: Open a terminal window. Type the following path in the terminal and press Enter: /opt/OSIsoft/EdgeCmd/edgecmd Note: You can access EdgeCmd utility without using the full path on Linux."
  },
  "V1/edgecmd/README.html": {
    "href": "V1/edgecmd/README.html",
    "title": "Edgecmd",
    "keywords": "Edgecmd"
  },
  "V1/Configure OSIsoft Adapter for DNP3/Data selection.html": {
    "href": "V1/Configure OSIsoft Adapter for DNP3/Data selection.html",
    "title": "Data selection",
    "keywords": "Data selection"
  },
  "V1/Configure OSIsoft Adapter for DNP3/Configure data source.html": {
    "href": "V1/Configure OSIsoft Adapter for DNP3/Configure data source.html",
    "title": "Configure data source",
    "keywords": "Configure data source"
  },
  "V1/Software requirements.html": {
    "href": "V1/Software requirements.html",
    "title": "Software requirements",
    "keywords": "Software requirements"
  },
  "V1/Principles of operation.html": {
    "href": "V1/Principles of operation.html",
    "title": "Principles of operation",
    "keywords": "Principles of operation"
  },
  "V1/OSIsoft Adapter for DNP3 diagnostics.html": {
    "href": "V1/OSIsoft Adapter for DNP3 diagnostics.html",
    "title": "OSIsoft Adapter for DNP3 diagnostics",
    "keywords": "OSIsoft Adapter for DNP3 diagnostics"
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes these values, which are logged in a stream with the id {componentid}.StreamCount. The stream count and type count include only types and streams created for sequential data received from a data source. Type Property Description string timestamp Timestamp of event int StreamCount Number of streams created by the adapter instance int TypeCount Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes these values, which are logged in a stream with the id {componentid}.IORate. IO rate includes only sequential data collected from a data source. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes these values, which are logged in a stream with the id {componentid}.ErrorRate. Type Property Description string timestamp Timestamp of event double ErrorRate 1-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration OSIsoft adapters write daily log messages for the adapter, the system, and omf egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters\\adapterName\\adapterId\\Logs • Linux: /usr/share/OSIsoft/Adapters/adapterName/adapterId/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following procedure to change the logging configuration: Using any text editor, create a file that contains the logging configuration in JSON form. For content structure, see Example Default logging configuration . For all available parameters, see Logging parameters . Save the file, for example as Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter, for example OpcUa1 . Example using curl (run this command from the same directory where the file is located): curl -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Logging\" On successful execution, the log level change takes effect immediately during runtime. The other configurations (log file size and file count) get updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file will revert to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description logLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace, Debug, Information, Warning, Error, Critical. For detailed information about the logLevels, see LogLevel . logFileSizeLimitBytes Optional integer The maximum size in bytes of log files that the service will create for the component. It must be a positive integer. logFileCountLimit Optional integer The maximum number of log files that the service will create for the component. It must be a positive integer. LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages shouldn’t be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information (like version information relating to the software at startup, what external services are being used, data source connection string, number of measurements, egress URL, change of state “Starting”, “Stopping”, or configuration) can be useful for diagnosing potential application errors. Warning Logs that highlight an abnormal or unexpected event in the application flow, but does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention, but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. This can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the default for a component on install: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging PUT Updates the system logging configuration api/v1/configuration/ ComponentId /Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ ComponentId /Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component, for example Modbus1 or OpcUa1."
  },
  "V1/main/V1/Configuration/Diagnostics configuration.html": {
    "href": "V1/main/V1/Configuration/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration This section provides information on how to configure your OSIsoft adapters so that diagnostics data is produced and stored at the designated health endpoint. For more information about adapter diagnostics, see Adapter diagnostics . Configure diagnostics Using any text editor, create a file that contains the diagnostics configuration in JSON form. For content structure, see Example - Retrieve the diagnostics configuration . For a table of all available parameters, see Diagnostics parameters . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/diagnostics Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"{ \"enableDiagnostics\":true }\" -H \"Content-Type:application/json\" -X PUT \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters The following parameters are available for configuring diagnostics: Parameter Required Type Description EnableDiagnostics Required boolean Determines whether Diagnostics are enabled. Example Retrieve the diagnostics configuration Example using curl: curl -X GET \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools OSIsoft adapters can be configured with either the EdgeCmd utility, OSIsoft's proprietary tool for configuring adapters, or a commonly-used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see EdgeCmd utility . REST tools The following tools are available to make REST calls. curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. curl is easily scripted using Bash or PowerShell on either Linux or Windows, and can be used to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) . Postman Postman is a REST tool for systems with GUI components. OSIsoft adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about OSIsoft adapter REST APIs. For more information, see Postman (https://www.postman.com/) ."
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Start or stop a component.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Start or stop a component.html",
    "title": "Start or stop a component",
    "keywords": "Start or stop a component Complete the following procedure to either start or stop a component. Note: You can only start or stop adapter components. Open command line. Type one of the following in the command line, replacing <componentId> with the ID of the component, and press Enter. ./edgecmd Administration <ComponentId> Stop ./edgecmd Administration <ComponentId> Start"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Configure adapter component.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Configure adapter component.html",
    "title": "Configure adapter component",
    "keywords": "Configure adapter component The EdgeCmd utility enables you to add, configure, and delete adapter components. View configured components Complete the following procedure to view the components currently configured on the adapter: Open command line. Type the following in the command line and press Enter. edgecmd Configuration System Components Add components Complete the following procedure to add a new component: Open command line. Type the following in the command line, replacing <componentId> and <componentType> with the values that you want and press Enter. Note: The only valid component type is the adapter type. For example, if you are trying to register a new Modbus component, use Modbus and if you are trying to register an OPC UA component, use OpcUa . Refer to the specific adapter's user guide for that adapter's component type. edgecmd Configuration System Components componentId=<componentId> componentType=<componentType> Example : Modbus adapter component registration edgecmd Configuration System Components componentId=Modbus1 componentType=Modbus Configure components The adapters have the following configurable facets: data source, data selection, and logging. Complete the following procedure to configure a facet: Open command line. Type the following in the command line, replacing <componentId> and <facetName> with the values that you want. edgecmd Configuration <componentId> <facetName> Add key=value pairs to specify which values of the facet that you want to configure are to be changed and press Enter. Example : Configuration of the data source facet of a Modbus adapter edgecmd Configuration Modbus1 DataSource IpAddress=117.23.45.110 port=502 ConnectTimeout=15000 StreamIdPrefix=\"DataSource1\" For detailed information on how to configure each adapter, see the user guide for the corresponding adapter. Delete components Complete the following procedure to delete components from the adapter: Open command line. Type the following in the command line, replacing <componentId> with the ID of the component that you want to delete, and press Enter. edgecmd Configuration System Components id=<componentId> delete Note: You cannot delete the Egress component because it is required for Edge Data Store to operate."
  },
  "V1/edgecmd/V1/readme.html": {
    "href": "V1/edgecmd/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/Configure OSIsoft Adapter for DNP3/Configure OSIsoft Adapter for DNP3.html": {
    "href": "V1/Configure OSIsoft Adapter for DNP3/Configure OSIsoft Adapter for DNP3.html",
    "title": "Configure OSIsoft Adapter for DNP3",
    "keywords": "Configure OSIsoft Adapter for DNP3"
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "README.html": {
    "href": "README.html",
    "title": "OSIsoft Adapter DNP3 Docs",
    "keywords": "OSIsoft Adapter DNP3 Docs"
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete one of the following procedures for your operating system to uninstall an OSIsoft adapter: Windows To remove the OSIsoft adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not removed by the uninstall process. Optional: To remove data, configuration and log files, remove the directory %ProgramData%\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to configuration and log files. Linux To remove OSIsoft adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove osisoft.adapters.<AdapterName> Optional: To remove data, configuration, and log files, remove the directory /usr/share/OSIsoft/Adapters/AdapterName . This will delete all data processed by the adapter, in addition to configuration and log files. Alternatively, you can run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Installation prerequisites Adapters require the installation of the following software: .NET Core 3.1 Operating systems: Alpine: 3.10+ Debian: 9+ Ubuntu: 16.04+ Fedora: 29+ centOS: 7+ RHEL: 6+ openSUSE: 15+ SUSE Enterprise Linux (SLES): 12 SP2+ macOS: 10.13+ Windows Client: 8.1, 10 (1607+) Windows Server: 2012 R2+"
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. For more information, see Adapter health . OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For more information, see Adapter diagnostics . The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see EdgeCmd utility . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of \"Good\" is expected. Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data, which can be egressed to different health endpoints. For details, see the following sections. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics streams. IO rate The Diagnostics.Egress.IORate dynamic type includes these values, which are logged in a stream with the id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate. IO rate includes only sequential data sucessfully sent to an egress. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data which is sent to all health endpoints. The System_Diagnostics.json file contains a flag which determines whether Diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Dynamic data is sent every minute to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The_ Elements root contains a link to an Adapters _ node. This is the root note for all adapter instances. Below Adapters there will be one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: _**{ComputerName}.{ServiceName}**_ . For example, in the following image, RGRALAK5530 is the computer name, and SignalGenerator is the service name. To see the System.Diagnostics values, clicking on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the edgecmd command line tool for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form (with cryptographic key material stored separately in a secure location.) If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system using REST, but also configure the system as a whole with a single REST call. Configure system components Configuration of system components includes adding, updating and deleting components. Add a system component Complete the following procedure to add a new component to the system: Using any text editor, create a file that contains the component to be added to the system in JSON form. For content structure, see Default system components configuration . For a table of all available parameters, see System components parameters . Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components if you want, but only a single OmfEgress component is supported. The following example adds a Modbus TCP adapter. { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter: Save the file, for example as AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/components\" After the curl command completes successfully, you can configure or use the new component. Delete a system component Complete the following procedure to delete an existing component: Start any tool capable of making HTTP requests. Execute a DELETE command to the following endpoint, replacing <ComponentId> with the ID of the component that you want to delete: http://localhost:5590/api/v1/configuration/system/components/<ComponentId>/ Example using curl - Delete OpcUa1 component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1/\" All the logs and configurations files for the deleted components will be moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The full schema definition for the system components configuration is in the System_Components_schema.json located here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components: Parameters Required Type Nullable Description ComponentId Required string Yes The ID of the component. It can be any alphanumeric string, for example OmfEgress. ComponentType Required string Yes The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] Example system components configuration [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components GET Retrieves the system components configuration api/v1/configuration/system/components POST Adds a new component to the system configuration api/v1/configuration/system/components PUT Updates the system components configuration api/v1/configuration/system/components/ componentId DELETE Deletes a specific component from the system components configuration"
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration You can configure the System and adapter components together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in JSON form. For content structure, see Sample configuration file . Save the file. Use any of the Configuration Tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration Example using curl: curl -d \"@{JSON file name}\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result. Sample configuration file The following sample file shows the configuration of an OPC UA adapter. { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ] }, \"Egress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ], \"Buffering\": { \"BufferLocation\": \"C:\\\\ProgramData\\\\OSIsoft\\\\Adapters\\\\OpcUa\\\\OpcUa\\\\Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component By default, all currently configured ingress components are started. Start an ingress component Complete the following procedure to start an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Example Start the OpcUa1 ingress component using curl: curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/OpcUa1/Start\" An HTTP status 204 message indicates success. Stop an ingress component Complete the following procedure to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Example Stop the Modbus1 ingress component using cURL: curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/Modbus1/Stop\" An HTTP status 204 message indicates success."
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete one of the following procedures for your operating system to start or stop an adapter service: Windows Open Windows services. Select OSIsoft Adapter for AdapterName , for example OSIsoft Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following: Example: Start OSIsoft Adapter for OPC UA systemctl start OSIsoft Adapter for OPC UA Example: Stop OSIsoft Adapter for Modbus TCP systemctl stop OSIsoft Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core Framework, and the operating system that the adapter is running on. Complete the following procedure to retrieve the product version information of an OSIsoft adapter: Start any configuration tool capable of making HTTP requests. Execute a GET command to the following endpoint: GET http://localhost:5590/api/v1/Diagnostics/ProductInformation Result example: { \"Application Version\": \"1.1.0.0\", \".Net Core Version\": \".NET Core 3.1.0\", \"Operating System\": \"Microsoft Windows 10.0.18362\" }"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Retrieve existing configuration.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Retrieve existing configuration.html",
    "title": "Retrieve existing configuration",
    "keywords": "Retrieve existing configuration EdgeCmd utility provides the possibility to view the configuration for each part of the adapter. View adapter configuration Complete the following procedure to view the configuration for the adapter: Open command line. Type the following in the command line and press Enter. edgecmd Configuration See example View the configuration of the adapter . View a specific component configuration Complete the following procedure to view the configuration of a specific component: Open command line. Type the following in the command line, replacing <componentId> with the ID of the component, and press Enter. edgecmd Configuration <componentId> See example View the configuration of the System component . View a specific facet configuration Complete the following procedure to view the configuration of a specific facet of an adapter component: Open command line. Type the following in the command line, replacing <componentId> and <facetName> with the ID of the component and the facet name, and press Enter. edgecmd Configuration <componentId> <facetName> See example View the configuration of the Logging facet within the Egress component . View a specific facet entry configuration Complete the following procedure to view the configuration of a specific facet entry of a component: Open command line. Type the following in the command line, replacing <componentId> and <facetName> with the ID of the component and the facet name. edgecmd Configuration <componentId> <facetName> id=IndexToRetrieve Add the key=value pairs for the facet to configure, for example id=IndexToRetrieve , and press Enter. See example View the configuration of a specific entry in the HealthEndpoints facet within the System component . Examples View the configuration of the adapter edgecmd Configuration { \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" } ], \"Buffering\": { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } }, \"Modbus1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": {}, \"DataSelection\": [] }, \"Egress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [], \"Buffering\": { \"onDiskBufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"onDiskMaxBufferSizeMB\": -1 } } } View the configuration of the System component edgecmd Configuration System { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" } ], \"Buffering\": { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } } View the configuration of the Logging facet within the Egress component edgecmd Configuration Egress Logging { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } View the configuration of a specific entry in the HealthEndpoints facet within the System component edgecmd Configuration System Healthendpoints id=Endpoint_1 { \"id\": \"Endpoint_1\", \"endpoint\": \"https://localhost:5821\", \"userName\": \"user_54\", \"password\": \"***************\", \"clientId\": null, \"clientSecret\": null, \"tokenEndpoint\": null, \"validateEndpointCertificate\": true }"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Retrieve EdgeCmd utility help.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Retrieve EdgeCmd utility help.html",
    "title": "Retrieve EdgeCmd utility help",
    "keywords": "Retrieve EdgeCmd utility help The EdgeCmd utility provides a 'Help' utility with instructions on how to use EdgeCmd utility. View general help instructions Complete the following procedure to view help instructions on how to use the Edgecmd utility: Open command line. Type the following in the command line and press Enter. edgecmd Help View component help instructions Complete the following procedure to view help instructions for a registered component that the adapter supports: Open command line. Type the following in the command line, replacing <componentId> with the value that you want, and press Enter. edgecmd Help <componentId> See the example Help for the System component . Note: The help output also provides examples of commands that you can run to configure the component. View component facet help instructions Complete the following procedure to view help instructions for a specific facet within a component that the adapter supports: Open command line. Type the following in the command line, replacing <componentId> and <facetName> with the value that you want, and press Enter. edgecmd Help <componentId> <facetName> See the example Help for the Diagnostics facet within the System component . Examples Help for the System component: edgecmd Help System --------------------------------------------------------------------------------------------------------- Component System command-line options => 'Logging' --------------------------------------------------------------------------------------------------------- LogLevel [Required] Desired log level settings. Options: Trace, Debug, Information, Warning, Error, Critical, None. LogFileSizeLimitBytes [Required] Maximum size in bytes of log files that the service will create for this component. Must be no less than 1000. LogFileCountLimit [Required] Maximum number of log files that the service will create for this component. Must be a positive integer. Example: ./edgecmd Configuration System Logging LogLevel=Warning Example: ./edgecmd Configuration System Logging LogFileSizeLimitBytes=32768 Example: ./edgecmd Configuration System Logging LogFileCountLimit=5 --------------------------------------------------------------------------------------------------------- Component System command-line options => 'HealthEndpoints' --------------------------------------------------------------------------------------------------------- Id [Optional] Id of existing configuration to be edited or removed. Endpoint [Required] URL of OMF destination UserName [Required group 1] User name used for authentication to PI Web API OMF endpoint. Password [Required group 1] Password used for authentication to PI Web API OMF endpoint. ClientId [Required group 2] Client ID used for authentication to OSIsoft Cloud Services. ClientSecret [Required group 2] Client Secret used for authentication to OSIsoft Cloud Services. TokenEndpoint [Optional group 2] URL of OMF destination's token service. ValidateEndpointCertificate [Optional] If true, endpoint certificate will be validated (recommended). If false, any endpoint certificate will be accepted. OSIsoft strongly recommends using disabled endpoint certificate validation for testing purposes only. Note: Only one Required group must be specified. Group 1 for PI Web API or Group 2 for OCS. Example: Add a new endpoint: ./edgecmd Configuration System HealthEndpoints Endpoint=endpointURL UserName=UserName Password=Password Update fields of an existing endpoint: ./edgecmd Configuration System HealthEndpoints Id=Endpoint1 Password=newPassword View existing endpoints: ./edgecmd Configuration System HealthEndpoints File Import (replaces current endpoints): ./edgecmd Configuration System HealthEndpoints File=endpoints.json Delete an endpoint: ./edgecmd Configuration System HealthEndpoints Id=Endpoint1 Delete --------------------------------------------------------------------------------------------------------- Component System command-line options => 'Diagnostics' --------------------------------------------------------------------------------------------------------- EnableDiagnostics [Required] Enable global diagnostics. Example: ./edgecmd Configuration System Diagnostics EnableDiagnostics=True --------------------------------------------------------------------------------------------------------- Component System command-line options => 'Components' --------------------------------------------------------------------------------------------------------- ComponentId [Required] ID of the hosted component. ComponentType [Required] Type of the hosted component. Example: ./edgecmd Configuration System Components ComponentId=Modus1 ComponentType=Modbus --------------------------------------------------------------------------------------------------------- Component System command-line options => 'Buffering' --------------------------------------------------------------------------------------------------------- BufferLocation Location of the on-disk buffers MaxBufferSizeMB Maximum size of the on-disk buffers (-1 = restricted only by available free disk space) EnableBuffering Enable or disable buffering Help for the Diagnostics facet within the System component edgecmd Help System Diagnostics --------------------------------------------------------------------------------------------------------- Component System command-line options => 'Diagnostics' --------------------------------------------------------------------------------------------------------- EnableDiagnostics [Required] Enable global diagnostics. Example: ./edgecmd Configuration System Diagnostics EnableDiagnostics=True"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Delete configuration.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Delete configuration.html",
    "title": "Delete configuration",
    "keywords": "Delete configuration Configuration can be deleted on an entry or a facet basis. Both options are described following. Delete configuration entry Complete the following procedure to delete a configuration entry from a collection configuration. For example, you can delete a single health endpoint of the 'HealthEndpoints' facet within the 'System' component. Open command line. Type the componentId and facetName followed by the ID of the entry to be removed. Add the delete keyword and press Enter. Example: Delete endpoint_1 of the HealthEndpoints facet from the System: edgecmd Configuration System HealthEndpoints Id=endpoint_1 delete Delete configuration file Complete the following procedure to delete a configuration file. For example, you can delete the configuration file of the 'HealthEndpoints' facet within the 'System' component. Open command line. Type the componentId and facetName . Add the delete keyword and press Enter. Example: Delete the HealthEndpoints facet configuration file: edgecmd Configuration System HealthEndpoints delete"
  },
  "V1/edgecmd/V1/EdgeCmd utility/Configure adapter.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/Configure adapter.html",
    "title": "Configure adapter",
    "keywords": "Configure adapter OSIsoft adapters provide several configuration options, including configuration with JSON files and bulk configurations. Change all values of a facet Complete the following procedure to change all values of a facet: Open command line. Type the componentId and facetName , followed by key=value pairs that you want to change. Then press Enter. Example: Change all values in the 'Logging' facet: edgecmd Configuration Egress Logging LogLevel=Warning LogFileSizeLimitBytes=32768 LogFileCountLimit=5 Configure key=value pairs in a facet Complete the following procedure to configure any number of valid key=value pairs in a facet: Open command line. Type the componentId and facetName followed by the key=value pairs that you want to change, and press Enter. Example: Change a single value in the 'Logging' facet: edgecmd Configuration Egress Logging LogFileCountLimit=5 Add an entry to a collection configuration Complete the following procedure to add an entry to a collection configuration: Open command line. Type the componentId and facetName followed by the key=value pairs, and press Enter. Example: Add the 'Health Endpoints' facet to the 'System' component: edgecmd Configuration System HealthEndpoints Id=endpoint_1 Endpoint=endpointURL UserName=UserName Password=Password Note: If an entry with the specified ID already exists, it will be updated based on the new key=value pairs. Configure with JSON Files You can also configure the adapter by a JSON file input into the EdgeCmd application. A file import completely replaces the existing configurations; therefore, you cannot use it to change individual values in a facet without modifying others. Import bulk configuration Complete the following procedure to import a bulk configuration: Open command line. Type the following in the command line, replacing <PathToJsonFile> with the path to the file, and press Enter. edgecmd Configuration file=<PathToJsonFile> Import facet specific configuration Complete the following procedure to import a facet specific configuration file for a component: Open command line. Type the following in the command line, replacing <componentId> with the ID of the component, <facetName> with the name of the facet, and <PathToJsonFile> with the path to the file. Then press Enter. edgecmd Configuration <componentId> <facetName> file=<PathToJsonFile> Import facets configuration in bulk Complete the following procedure to import a file with configuration for individual facets as a bulk file import operation: Note: The file must contain only information for the given component ID. Open command line. Type the file name as shown in the Logging.json example and press Enter. edgecmd Configuration file=\"~/Logging.json\" Example: { \"Egress\": { \"Logging\": { \"logLevel\": \"Warning\", \"logFileSizeLimitBytes\": 19283, \"logFileCountLimit\": 999 } } } Note: The command only affects the specified key-value pairs for the 'Logging' facet in the 'Egress' component, it does not change any other components or facets. However, import affects all key-value pairs in the facet. If you import the following example JSON file, the 'logLevel' and 'logFileSizeLimitBytes' values will be modified and the remaining values in the 'Logging' facet will be reset to their default values (logFileCountLimit). { \"Egress\": { \"Logging\": { \"logLevel\": \"Warning\", \"logFileSizeLimitBytes\": 19283 } } }"
  },
  "V1/main/V1/Troubleshooting/Logging.html": {
    "href": "V1/main/V1/Troubleshooting/Logging.html",
    "title": "Logging",
    "keywords": "Logging"
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter Adapters can be installed on either a Windows or Linux operating system. Before installing the adapter, see the Installation prerequisites section to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following procedure to install an OSIsoft adapter on Windows: Download the Windows .msi file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Run the .msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590. Optional: Run the following curl command, using the port number that you specified during installation, to verify the installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned Linux Complete the following procedure to install an OSIsoft adapter on Linux: Download the appropriate Linux distribution file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo apt install command. For example, to install the Linux ARM Debian package, run command. sudo apt install ./Modbus_linux-arm.deb . To install the Linux x64 package, run command sudo apt install ./Modbus_linux-x64.deb . Optional: Run the following curl command, using the port number that you specified during installation, to verify the installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned"
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the id System.Diagnostics. This diagnostic stream contains system level information related to the host platform that the adapter is running on. Type Property Description string timestamp Timestamp of event int ProcessIdentifier Process id of the host process string StartTime Time at which the host process started long WorkingSet Amount of physical memory in bytes, allocated for the host process double TotalProcessorTime (uom=s) Total processor time for the host process expressed in seconds double TotalUserProcessorTime (uom=s) User processor time for the host process expressed in seconds double TotalPrivilegedProcessorTime (uom=s) Privileged processor time for the host process expressed in seconds int ThreadCount Number of threads in the host process int HandleCount Number of handles opened by the host process double ManagedMemorySize (uom=MB) Number of bytes currently thought to be allocated in managed memory double PrivateMemorySize (uom=MB) Amount of paged memory, in bytes, allocated for the host process double PeakPagedMemorySize (uom=MB) Maximum amount of memory in the virtual memory paging file, in bytes, used by the host process. double StorageTotalSize (uom=MB) Total size of the storage medium in use by the system double StorageFreeSpace (uom=MB) Free space available Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration OSIsoft adapters can be configured to produce and store health data at a designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OSIsoft OMF endpoint where adapter health information should be sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in JSON form. For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints/ Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data. ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint. ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint. Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint. Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends setting this to true in production environments. Defaults to true. REST URLs Relative URL HTTP verb Action api/v1/Configuration/System/HealthEndpoints GET Retrieves all configured health endpoints api/v1/Configuration/System/HealthEndpoints POST Adds a new PI Web API OMF or OCS health endpoint api/v1/Configuration/System/HealthEndpoints/ PATCH Updates or changes the values of a specific configured endpoint"
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. Supported destinations are OSIsoft Cloud Services and PI servers through PI Web API. An egress endpoint represents a destination to which data will be sent. You can specify multiple endpoints. Every egress endpoint is executed independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Note: Some types, and consequently containers and data, cannot be egressed. For more information, see Egress execution details . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoints, see REST URLs . Complete the following procedure to create new egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in JSON form. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file, for example as OmfEgress_DataEndpoints.config.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Examples using curl: Add endpoints curl -d \"@OmfEgress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -d \"@OmfEgress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" Delete an endpoint curl -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" Update an endpoint curl -d \"@OmfEgress_DataEndpoint.config.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" View endpoints curl -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Nullable Description Id Required string Yes Unique identifier Endpoint Required string No Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI server. ValidateEndpointCertificate Optional boolean No Disables verification of destination certificate. Use for testing only with self-signed certificates. Defaults to true. ClientId Required for OCS endpoint string Yes Authentication with the OCS OMF endpoint. ClientSecret Required for OCS endpoint string Yes Authentication with the OCS OMF endpoint. TokenEndpoint Optional for OCS endpoint string Yes Retrieves an OCS token from an alternative endpoint. Username Required for PI endpoint string Yes Basic authentication to the PI Web API OMF endpoint. Password Required for PI endpoint string Yes Basic authentication to the PI Web API OMF endpoint. Examples The following examples are valid egress configurations. Egress data to OCS [{ \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API. [{ \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints/{id} GET Gets configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} DELETE Deletes configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} PUT Replaces egress endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/omfegress/DataEndpoints/{id} PATCH Allows partial updating of configured endpoint by id Egress execution details After you add configuration for an egress endpoint, egress will be executed immediately for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers will be egressed. After that only new or changed types or containers will be egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If an egress endpoint is removed, data flow will immediately stop for that endpoint. Buffered data of a removed endpoint will be permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item will result in the message failing. Types, containers, and data will continue to be egressed as long as the destination continues to respond to HTTP requests - retrying previous failures as needed."
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration You can configure buffering for data egressed from the adapter to endpoints through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless necessary. The changes to the buffering configuration parameters take effect only during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in JSON form. For content structure, see the sample output in Examples - Retrieve the buffering configuration . For a table of all available parameters, see Buffering parameters . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/buffering Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"{ \"MaxBufferSizeMB\": 50, \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/NewBuffers\", \"EnableBuffering\": true }\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnableBuffering Optional boolean Enables or disables buffering. Default: True MaxBufferSizeMB Optional Integer Defines the maximum size of the buffer file that will be persisted on disk. The unit is specified in MB (1 Mebibyte = 1048576 bytes). Take into account the capacity and type of the storage medium to determine a suitable value for this parameter. A value of -1 indicates that the buffer file size is restricted only by the available free disk space. Allowed values: -1 or [1, 2147483647]. Default: -1 BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Take into account access-control list (ACL) when setting this parameter Allowed value: Valid path to a folder location in the file system. Default: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterType}\\{AdapterInstance}\\Data Linux: /usr/share/OSIsoft/Adapters/{AdatpterType}/{AdapterInstance}/Data Examples The following examples are buffering configurations made through curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } 200 OK response indicates success. Update MaxBuferSizeMb parameter curl -d \"{ \"MaxBufferSizeMB\": 100 }\" -H \"Content-Type: application/json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering GET Gets the buffering configuration api/v1/configuration/system/buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/edgecmd/V1/EdgeCmd utility/EdgeCmd utility.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/EdgeCmd utility.html",
    "title": "EdgeCmd utility",
    "keywords": "EdgeCmd utility With the EdgeCmd utility, you can configure and administer adapters on Linux and Windows just like with REST and command line arguments. Note: Configuration and administrative REST interfaces are generally exposed through the command line. Install EdgeCmd utility The following sections provide instructions to install the EdgeCmd utility on Windows or Linux. Windows Note: You must have administrative privileges to run the installer. Complete the following procedure to install the EdgeCmd utility on Windows: Copy the EdgeCmd.msi file to the file system of the device. To start the installer, double-click the EdgeCmd.msi file in Windows Explorer. Note: To change the install path from the default path of C:\\Program Files\\OSIsoft\\EdgeCmd, enter the following command in the command prompt and update the <file_path>. OSIsoft recommends you use the default value. msiexec /i EdgeCmd.msi INSTALLFOLDER=<file_path> Note: INSTALLFOLDER must be in all caps as shown in the preceding example. The EdgeCmd utility is installed on your device. Linux Note: You must have administrative privileges to install the software, for example root or sudo privilege. Complete the following procedure to install the EdgeCmd utility on Linux: Open a terminal window and type the sudo command for the appropriate EdgeCmd deb file for your processor: Debian 9 or later (Intel/AMD 64-bit processors) sudo apt install ./EdgeCmd_linux-x64.deb Debian 9 or later (ARM32, Raspberry PI 2,3,4: Raspbian, BeagleBone) sudo apt install ./EdgeCmd_linux-arm.deb Debian 9 or later (Raspberry PI 3,4: Ubuntu ARM64 Server, Google Coral Dev Board, Nvidia Nano Jetson) sudo apt install ./EdgeCmd_linux-arm64.deb A validation check for prerequisites will be completed. After the check for prerequisites succeeds, you are prompted with the option to change the default port (5590). If the Linux OS is up to date, the install will succeed and the EdgeCmd utility will be running on your device. If the install fails, run the following commands from the terminal window and try the install again: sudo apt update sudo apt upgrade"
  },
  "V1/edgecmd/V1/EdgeCmd utility/EdgeCmd commands.html": {
    "href": "V1/edgecmd/V1/EdgeCmd utility/EdgeCmd commands.html",
    "title": "EdgeCmd commands",
    "keywords": "EdgeCmd commands The following tables provide an overview of available edgecmd commands that you can use with components of the adapter. Every command that you use with the edgecmd utility has to be preceded by edgecmd . Help edgecmd command Description Examples edgecmd Help Display general instructions on how to use the edgecmd utility. edgecmd Help <componentName> Display help for a specific adapter component. edgecmd Help System edgecmd Help <componentName> <facetName> Display help for a specific facet of an adapter component. edgecmd Help System Port Configuration System edgecmd command Description Examples edgecmd Configuration Display the entire configuration for every adapter component. edgecmd Configuration System Components Display the components that are currently configured. edgecmd Configuration System Components componentId=<componentId> componentType=<componentType> Add a new component. edgecmd Configuration System Components componentId=Modbus1 componentType=Modbus edgecmd Configuration System Components id=<componentId> delete Delete a component. edgecmd Configuration System Components id=Modbus1 delete Components edgecmd command Description Examples edgecmd Configuration <componentId> Display component specific configuration. edgecmd Configuration System or edgecmd Configuration OpcUa1 edgecmd Configuration <componentId> <facetName> Display facet specific configuration of a component. edgecmd Configuration System Logging edgecmd Configuration <componentId> <facetName> id=<IndexToRetrieve> Display the configuration of a specific entry of a facet. edgecmd Configuration System HealthEndpoints id=Endpoint1 edgecmd Configuration <componentId> DataSource Configure the data source for the adapter. For examples, see OSIsoft Adapter for OPC UA data source configuration and OSIsoft Adapter For Modbus TCP data source configuration . edgecmd Configuration <componentId> DataSelection Configure the data selection for the adapter. For examples, see OSIsoft Adapter for OPC UA data selection configuration and OSIsoft Adapter for Modbus TCP data selection configuration . edgecmd Configuration <componentId> Logging Configure logging for a component. edgecmd Configuration OpcUa1 Logging Configuration with JSON files edgecmd command Description Examples edgecmd Configuration file=<PathToJsonFile> Import a bulk configuration through a JSON file. edgecmd Configuration file=\"~/Bulk_Storage_Runtime.json\" edgecmd Configuration <componentId> <facetName> file=<PathToJsonFile> Import a facet specific configuration file for a component. edgecmd Configuration Modbus1 DataSource file=\"~/System_Logging.json\" Administration edgecmd command Description Examples edgecmd Administration ComponentId Stop Stops a component. Only applicable for adapter type components. edgecmd Administration Modbus1 Stop edgecmd Administration ComponentId Start Starts a component. Only applicable for adapter type components. edgecmd Administration Modbus1 Start"
  },
  "V1/Configure OSIsoft Adapter for DNP3/Data source.html": {
    "href": "V1/Configure OSIsoft Adapter for DNP3/Data source.html",
    "title": "Data source",
    "keywords": "Data source"
  },
  "V1/Configure OSIsoft Adapter for DNP3/Configure data selection.html": {
    "href": "V1/Configure OSIsoft Adapter for DNP3/Configure data selection.html",
    "title": "Configure data selection",
    "keywords": "Configure data selection"
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "OSIsoft Adapter for DNP3",
    "keywords": "OSIsoft Adapter for DNP3 ======= Introduction to OSIsoft Adapter for DNP3 OSIsoft Adapter for DNP3 operational overview Supported features Prepare for adapter installation Software requirements Hardware requirements Download OSIsoft Adapter Adapter security Install the adapter Uninstall the adapter Configure OSIsoft Adapter for DNP3 Configuration schemas Data source Data selection Logging Endpoint Configure data source Configure data selection Configure message logging Configure endpoints Data collection and connection Verify connection from data source to the adapter Verify data collection Start or stop the adapter Start or stop the data source Adapter administration Data buffering Adapter to OCS buffering Adapter to PI Server buffering Health Device status Next health message expected Diagnostics OSIsoft Adapter diagnostics OSIsoft Adapter for OPC UA diagnostics Troubleshooting Logging Data buffering"
  }
}